version: '3.3'
services:

  postgres:
    container_name: ${PG_SERVICE_NAME}
    image: ${PG_IMAGE}
    restart: always
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: { PG_USER }
      POSTGRES_PASSWORD: { PG_PASS }
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./data/pgsql:/var/lib/postgresql/data
      # - pgdata:/var/lib/postgresql/data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  pgadmin4:
    container_name: ${PG_ADMIN_SERVICE_NAME}
    image: ${PG_ADMIN_IMAGE}
    ports:
      - ${PG_ADMIN_PORT}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    volumes:
      # sets up a default server in the pgadmin interface
      - ./servers.json:/pgadmin4/${PG_ADMIN_DEFAULT_SERVER_PATH}
    networks:
      - mynetwork

  web:
    container_name: ${COMPOSE_PROJECT_NAME}
    #image: patikadev_web
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - 3000:3000

    environment:
      # Environment vars used for pg node module
      PORT: 3000
      POSTGRES_HOST: ${PG_HOST}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: { PG_PASS }
      POSTGRES_DB: { PG_DATABASE }
      PGPORT: 5432
      NODE_ENV: development
    depends_on:
      # - kafka
      - postgres
      # - redis
      # - mongodb
      # links:
      #   - kafka:kafka
      #   - redis:redis
      #   - mongodb:mongodb
    volumes:
      - /f/dev/nodejsyeni:/data/app/
      - /f/dev/nodejsyeni/node_modules:/data/node_modules/
    networks:
      - mynetwork
    command: npm run dev
networks:
  mynetwork:
    driver: bridge

volumes:
  node_modules: null
  postgres_data:

    null
